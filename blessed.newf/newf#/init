#!/source/this/sh
export __INIT__=". ${MESELF}#/init"
THIS_help () {
    echo help me
}
THIS_null () {
    echo try -h
}
THIS_miss () {
    echo "[$name]: undefined command [$1]"
}
THIS_handle () {
    this=${1}; shift
    here=$(dirname ${this})
    name=$(basename ${this})
    hole="${this}#"
    [ "$1" = ""       ] && { THIS_null $*; return $?; }
    [ "$1" = "-h"     ] && { THIS_help $*; return $?; }
    [ "$1" = "--help" ] && { THIS_help $*; return $?; }
    while true; do
        opt=${hole}/opt${1}
        [ -f $opt ] || break
        shift; . $opt; shift $MESHIFT
    done
    [ ! -f "${this}#${1}" ] && { THIS_miss $*; return $?; }
    export THIS="${this}#${1}"
    shift
    ${THIS} "$@"
    return $?
}
blcb () {
    echo "#cb " $*
}

bldump () {
    echo "------------------------------------"
    set | grep ^ME
    for arg in "$@"; do
        echo "      [$arg]"
    done
}
newf_dump () {
    echo
    echo '-----------------' $1
    for arg in "$@"; do echo "    [$arg]"; done
    echo '-----------------'
    set | grep ^NEWF
    echo '-----------------' $1
    echo
}
newf_dotornot() { [ -f ${1} ] || echo '.' ; }

newf_mktmpd () {
    local CB=/tmp/newf.cb.$RANDOM.$RANDOM.$RANDOM
    mkdir $CB && echo $CB
}
newf_real(){ python3 -c "import os.path;print(os.path.realpath(\"$1\"))"; }

newf_postinit () {
    newf_main $*
    export NEWFerr=$?
    [ "$NEWFdot" = "" ] && exit $NEWFerr || return $NEWFerr
}

newf_init_zero_this_args () {
    echo [new_init] [$*]
    [ -z "$NEWF_INIT" ] || return
    echo FIRST INITIAL.
    [ -f $NEWF_ZERO ] && export NEWF_DOT= || export NEWF_DOT=.
    export NEWF_REAL=$(newf_real $NEWF_THIS)
    export NEWF_ROOT=$(dirname $NEWF_REAL)
    export NEWF_INIT=${NEWF_ROOT}/__init__
}
[ "$1" = "--meself" ] && {
    shift
    THIS_handle $MESELF "$@"
}
